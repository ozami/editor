require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var CodeMirror = require("codemirror");

var indentAfterPaste = function indentAfterPaste(cm, change) {
  if (change.origin != "paste") {
    return;
  }
  if (CodeMirror.cmpPos(change.from, change.to)) {
    return;
  }
  // check if the insertion point is at the end of the line
  var dest = cm.getLine(change.from.line);
  if (dest.length != change.from.ch) {
    return;
  }
  // check if the line consists of only white spaces
  if (dest.match(/[^ \t]/)) {
    return;
  }
  // remove the last empty line
  if (change.text[change.text.length - 1] == "") {
    change.text.pop();
  }
  var base_indent = change.text[0].match(/^[ \t]*/)[0];
  change.text = change.text.map(function (line, i) {
    line = line.match(/^([ \t]*)(.*)/);
    var indent = line[1];
    var text = line[2];
    indent = (dest + indent).substr(0, dest.length + indent.length - base_indent.length);
    return indent + text;
  });
  change.text[0] = change.text[0].substr(dest.length);
};

module.exports = indentAfterPaste;

},{"codemirror":"codemirror"}],2:[function(require,module,exports){
"use strict";

var CodeMirror = require("codemirror");
var _ = require("underscore");
require("codemirror-addon");
require("./mark");
require("./select-line");
require("./select-word");
require("./split-into-lines");
require("./text-mode");

Object.assign(CodeMirror.defaults, {
  lineNumbers: true,
  tabSize: 4,
  showCursorWhenSelecting: true,
  autoCloseBrackets: true,
  matchBrackets: true,
  matchTags: true,
  autoCloseTags: true,
  styleActiveLine: { nonEmpty: true },
  styleSelectedText: true,
  dragDrop: false,
  extraKeys: {
    "Ctrl-Space": "autocomplete",
    "Ctrl-U": "autocomplete",
    "Ctrl-/": "toggleComment",
    "Cmd-/": "toggleComment",
    "Tab": "indentAuto",
    "Ctrl-D": false,
    "Cmd-D": false
  }
});

CodeMirror.defineInitHook(function (cm) {
  // maintain indentation on paste
  cm.on("beforeChange", require("./indent-after-paste"));

  // key bindings
  var input = cm.getInputField();
  input.className += " mousetrap"; // enable hotkey
  var keymap = {
    "alt+b": "goWordLeft",
    "alt+f": "goWordRight",
    "alt+h": "delWordBefore",
    "alt+d": "delWordAfter",
    "mod+m": "mark",
    "mod+d": "selectWord",
    "mod+l": "selectLine",
    "mod+shift+l": "splitIntoLines"
  };
  _.each(keymap, function (command, key) {
    Mousetrap(input).bind(key, function () {
      cm.execCommand(command);
      return false;
    });
  });
});

module.exports = CodeMirror;

},{"./indent-after-paste":1,"./mark":3,"./select-line":4,"./select-word":5,"./split-into-lines":6,"./text-mode":7,"codemirror":"codemirror","codemirror-addon":"codemirror-addon","underscore":"underscore"}],3:[function(require,module,exports){
"use strict";

var CodeMirror = require("codemirror");

CodeMirror.defineInitHook(function (cm) {
  cm.marks = [];
});

<<<<<<< HEAD
CodeMirror.commands.mark = function(cm) {
  var cursor = cm.getCursor()
  if (cm.marks.length) {
    var last = cm.marks[cm.marks.length - 1]
=======
CodeMirror.commands.mark = function (cm) {
  var cursor = cm.getCursor();
  if (marks.length) {
    var last = cm.marks[cm.marks.length - 1];
>>>>>>> Use React for file tabs
    if (last.line == cursor.line && last.ch == cursor.ch) {
      cm.setSelections(cm.marks.map(function (m) {
        return { head: m, anchor: m };
      }), cm.marks.length - 1);
      cm.marks = [];
      return;
    }
  }
  cm.marks.push(cursor);
};

},{"codemirror":"codemirror"}],4:[function(require,module,exports){
"use strict";

var CodeMirror = require("codemirror");

CodeMirror.commands.selectLine = function (cm) {
  cm.setSelections(cm.listSelections().map(function (i) {
    return {
      anchor: {
        line: i.head.line + 1,
        ch: 0
      },
      head: {
        line: i.anchor.line,
        ch: 0
      }
    };
  }));
};

},{"codemirror":"codemirror"}],5:[function(require,module,exports){
"use strict";

var CodeMirror = require("codemirror");

CodeMirror.commands.selectWord = function (cm) {
  cm.setSelections(cm.listSelections().map(function (i) {
    return cm.findWordAt(i.anchor);
  }));
};

},{"codemirror":"codemirror"}],6:[function(require,module,exports){
"use strict";

var CodeMirror = require("codemirror");

CodeMirror.commands.splitIntoLines = function (cm) {
  var selections = cm.listSelections();
  if (selections.length != 1) {
    // Do nothing
    return;
  }
  var anchor = selections[0].anchor;
  var head = selections[0].head;
  var new_selections = [];
  for (var i = anchor.line; i <= head.line; ++i) {
    new_selections.push({
      anchor: {
        line: i,
        ch: i == anchor.line ? anchor.ch : 0
      },
      head: {
        line: i,
        ch: i == head.line ? head.ch : Infinity
      }
    });
  }
  cm.setSelections(new_selections);
};

},{"codemirror":"codemirror"}],7:[function(require,module,exports){
"use strict";

var CodeMirror = require("codemirror");

CodeMirror.defineSimpleMode("text", {
  start: [],
  comment: [],
  meta: {}
});

},{"codemirror":"codemirror"}],8:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");

var createDialog = function createDialog(Component, class_name) {
  return function (_React$Component) {
    _inherits(Dialog, _React$Component);

    function Dialog() {
      _classCallCheck(this, Dialog);

      return _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).apply(this, arguments));
    }

    _createClass(Dialog, [{
      key: "render",
      value: function render() {
        if (this.props.isOpen) {
          return React.createElement(
            "div",
            { className: "dialog-backdrop" },
            React.createElement(
              "div",
              { className: "dialog " + class_name },
              React.createElement(Component, this.props)
            )
          );
        }
        return null;
      }
    }]);

    return Dialog;
  }(React.Component);
};

module.exports = createDialog;

},{"react":"react"}],9:[function(require,module,exports){
"use strict";

var React = require("react");
var ReactDOM = require("react-dom");
var $ = require("jquery");
var _ = require("underscore");
var EditorView = require("./editor-view");
var FileTabList = require("./file-tab-list.jsx");

var EditorManagerView = function EditorManagerView($root, editor_mgr) {
  var $tabs = $("<div>").attr("id", "files").appendTo($root);
  var $editors = $("<div>").attr("id", "editors").appendTo($root);

  var render = function render() {
    ReactDOM.render(React.createElement(FileTabList, {
      editorMgr: editor_mgr
    }), $tabs[0]);
  };

  editor_mgr.opened.add(function (editor) {
    var path = editor.getPath();
    render();
    editor.status.observe(function () {
      render();
    });
    // editor view
    var $editor = $("<div>").addClass("editor").appendTo($editors);
    var editor_view = EditorView($editor, editor, editor_mgr);

    editors[path] = {
      $editor: $editor
    };
  });

  editor_mgr.closed.add(function (path) {
    render();
    editors[path].$editor.remove();
    delete editors[path];
  });

  editor_mgr.activated.add(render);
};

module.exports = EditorManagerView;

},{"./editor-view":11,"./file-tab-list.jsx":14,"jquery":"jquery","react":"react","react-dom":"react-dom","underscore":"underscore"}],10:[function(require,module,exports){
"use strict";

var signals = require("signals");
var _ = require("underscore");
var File = require("./file");
var Editor = require("./editor");

var EditorManager = function EditorManager(finder) {
  var model = {
    opened: new signals.Signal(),
    closed: new signals.Signal(),
    activated: new signals.Signal(),

    active: null, // path of active file
    editors: [],

    getFiles: function getFiles() {
      return model.editors.map(function (editor) {
        return editor.getPath();
      });
    },

    open: function open(path) {
      if (path === null) {
        throw "The path is null";
      }
      // try to activate already opened files
      if (model.activate(path)) {
        return;
      }
      var editor = Editor(File(path));
      editor.load().then(function () {
        model.editors.push(editor);
        model.opened.dispatch(editor);
        model.activate(path);
      });
    },

    getActive: function getActive() {
      return model.active;
    },

    activate: function activate(path) {
      if (path === model.active) {
        return true;
      }
      if (path !== null && model.indexOf(path) == -1) {
        return false;
      }
      model.active = path;
      model.activated.dispatch(path);
      finder.setPath(path);
      return true;
    },

    nextFile: function nextFile() {
      model.rotateFile(true);
    },

    prevFile: function prevFile() {
      model.rotateFile(false);
    },

    rotateFile: function rotateFile(next) {
      if (model.editors.length == 0) {
        return;
      }
      var idx;
      if (model.active === null) {
        idx = next ? 0 : model.editors.length - 1;
      } else {
        idx = model.indexOf(model.active);
        idx += next ? +1 : -1;
        idx = (idx + model.editors.length) % model.editors.length;
      }
      model.activate(model.editors[idx].getPath());
    },

    close: function close(path) {
      var idx = model.indexOf(path);
      if (idx == -1) {
        return;
      }
      if (path === model.active) {
        if (model.editors.length == 1) {
          model.activate(null);
        } else {
          model.prevFile();
        }
      }
      model.editors.splice(idx, 1);
      model.closed.dispatch(path);
    },

    reload: function reload(path) {
      model.close(path);
      model.open(path);
    },

    indexOf: function indexOf(path) {
      return model.getFiles().indexOf(path);
    }
  };

  finder.selected.add(model.open);

  return model;
};

module.exports = EditorManager;

},{"./editor":12,"./file":16,"signals":"signals","underscore":"underscore"}],11:[function(require,module,exports){
"use strict";

var React = require("react");
var ReactDOM = require("react-dom");
var $ = require("jquery");
var CodeMirror = require("./codemirror");
var SelectEncodingDialogView = require("./select-encoding-dialog-view");

var EditorView = function EditorView($root, editor, editor_mgr) {
  var file = editor.getFile();

  var cm = CodeMirror($root[0], {
    value: editor.text.get(),
    mode: editor.mode.get()
  });

  var $footer = $('<div>').appendTo($root);
  var render = function render() {
    var eol_names = {
      "\r": "CR",
      "\n": "LF",
      "\r\n": "CRLF"
    };
    ReactDOM.render(React.createElement(
      "div",
      { className: "editor-foot" },
      React.createElement(
        "div",
        { className: "editor-message" },
        editor.message.get()
      ),
      React.createElement(
        "button",
        { className: "editor-indent link", type: "button", onClick: editor.indent.rotate },
        editor.indent.get()
      ),
      React.createElement(
        "button",
        { className: "editor-eol link", type: "button", onClick: file.eol.rotate },
        eol_names[file.eol.get()]
      ),
      React.createElement(
        "button",
        { className: "editor-encoding link", type: "button",
          onClick: function onClick() {
            return editor.select_encoding_dialog.show(file.encoding.get());
          } },
        file.encoding.get()
      ),
      React.createElement(
        "div",
        { className: "editor-mode" },
        editor.mode.get()
      )
    ), $footer[0]);
  };
  render();
  SelectEncodingDialogView($('<div>').appendTo($root), editor.select_encoding_dialog);

  // save
  var last_generation = cm.changeGeneration(true);
  var save = function save() {
    var generation = cm.changeGeneration(true);
    editor.save().then(function () {
      last_generation = generation;
    });
  };
  cm.on("changes", function () {
    editor.text.set(cm.getValue());
    editor.status.set(cm.isClean(last_generation) ? "clean" : "modified");
  });
  editor.text.observe(function (text) {
    if (text != cm.getValue()) {
      cm.setValue(text);
    }
  });

  // mode
  editor.mode.observe(function (mode) {
    cm.setOption("mode", mode);
    CodeMirror.registerHelper("hintWords", mode, null);
    render();
  });

  // indent
  editor.indent.observe(function (type) {
    if (type == "TAB") {
      cm.setOption("indentWithTabs", true);
      cm.setOption("indentUnit", 4);
    } else {
      cm.setOption("indentWithTabs", false);
      cm.setOption("indentUnit", Number(type.replace("SP", "")));
    }
    render();
  });

  // line seprator
  file.eol.observe(render);

  // encoding
  file.encoding.add(render);
  editor.select_encoding_dialog.confirmed.add(file.encoding.set);

  // active
  editor_mgr.activated.add(function (active) {
    if (active == file.getPath()) {
      $root.addClass("active");
      cm.focus();
      cm.refresh();
    } else {
      $root.removeClass("active");
    }
  });

  // save with command-s
  Mousetrap($root[0]).bind("mod+s", function () {
    save();
    return false;
  });
};

module.exports = EditorView;

},{"./codemirror":2,"./select-encoding-dialog-view":28,"jquery":"jquery","react":"react","react-dom":"react-dom"}],12:[function(require,module,exports){
"use strict";

var $ = require("jquery");
var _ = require("underscore");
var Observable = require("./observable");
var CodeMirror = require("./codemirror");
var Indent = require("./indent");
var SelectEncodingDialog = require("./select-encoding-dialog");

var Editor = function Editor(file) {
  var editor = {
    text: Observable(""),
    status: Observable("clean"),
    mode: Observable("text"),
    indent: Indent(),
    message: Observable(""),
    select_encoding_dialog: SelectEncodingDialog(),

    getFile: function getFile() {
      return file;
    },

    getPath: function getPath() {
      return file.getPath();
    },

    load: function load(text) {
      return file.read().then(function (text) {
        editor.indent.set(Indent.detectIndentType(text));
        editor.text.set(text);
        editor.message.set("Loaded.");
      });
    },

    save: function save() {
      return file.write(editor.text.get()).catch(function (error) {
        editor.message.set("Save failed. " + reply.error);
        editor.status.set("error");
      }).then(function () {
        editor.status.set("clean");
        editor.message.set("Saved.");
      });
    }
  };

  var detectMode = function detectMode(path) {
    var extension = path.replace(/.*[.](.+)$/, "$1");
    var mode = {
      html: "php",
      tag: "php"
    }[extension];
    if (mode) {
      return mode;
    }
    mode = CodeMirror.findModeByExtension(extension);
    if (mode) {
      return mode.mode;
    }
    return "text";
  };
  editor.mode.set(detectMode(file.getPath()));

  // auto save
  editor.text.observe(_.debounce(function () {
    if (editor.status.get() != "clean") {
      editor.save();
    }
  }, 4000));

  return editor;
};

module.exports = Editor;

},{"./codemirror":2,"./indent":23,"./observable":25,"./select-encoding-dialog":29,"jquery":"jquery","underscore":"underscore"}],13:[function(require,module,exports){
"use strict";

var Rotate = require("./rotate");

var Eol = function Eol(eol) {
  return Rotate(["\n", "\r\n", "\r"], eol);
};

Eol.detect = function (text) {
  if (text.match("\r\n")) {
    return "\r\n";
  }
  if (text.match("\r")) {
    return "\r";
  }
  return "\n";
};

Eol.regulate = function (text) {
  return text.replace(/(\r\n|\r)/, "\n");
}, module.exports = Eol;

},{"./rotate":27}],14:[function(require,module,exports){
"use strict";

var React = require("react");
var FileTab = require("./file-tab.jsx");

var FileTabList = function FileTabList(props) {
  var mgr = props.editorMgr;
  var onClick = function onClick(path) {
    mgr.activate(path);
  };
  var items = mgr.editors.map(function (editor) {
    return React.createElement(FileTab, {
      key: editor.getPath(),
      editor: editor,
      active: mgr.active == editor.getPath(),
      onClick: onClick
    });
  });
  return React.createElement(
    "div",
    { id: "files" },
    items
  );
};

module.exports = FileTabList;

},{"./file-tab.jsx":15,"react":"react"}],15:[function(require,module,exports){
"use strict";

var React = require("react");

var FileTab = function FileTab(props) {
  var path = props.editor.getPath();
  var dir = path.replace(new RegExp("[^/]+$"), "");
  var name = path.replace(new RegExp(".*/"), "");
  var onClick = function onClick(e) {
    e.preventDefault();
    props.onClick(path);
  };
  return React.createElement(
    "div",
    {
      className: "file-item " + (props.active ? "active" : ""),
      onClick: onClick },
    React.createElement(
      "div",
      { className: "dir" },
      dir
    ),
    React.createElement(
      "div",
      { className: "name" },
      name
    ),
    React.createElement("div", { className: "status " + props.editor.status.get() })
  );
};

module.exports = FileTab;

},{"react":"react"}],16:[function(require,module,exports){
"use strict";

var $ = require("jquery");
var Observable = require("./observable");
var Eol = require("./eol");

var File = function File(path) {
  var file = {
    eol: Eol(),
    encoding: Observable(),

    getPath: function getPath() {
      return path;
    },

    read: function read() {
      return new Promise(function (resolve, reject) {
        $.ajax({
          method: "post",
          url: "/read.php",
          timeout: 3000,
          data: {
            path: path
          },
          dataType: "json"
        }).fail(reject).done(function (reply) {
          file.encoding.set(reply.encoding);
          file.eol.set(Eol.detect(reply.content));
          var content = Eol.regulate(reply.content);
          resolve(content);
        });
      });
    },

    write: function write(text) {
      return new Promise(function (resolve, reject) {
        $.ajax({
          url: "/write.php",
          method: "post",
          timeout: 2000,
          data: {
            path: path,
            encoding: file.encoding.get(),
            content: text.replace(/\n/g, file.eol.get())
          },
          dataType: "json"
        }).done(function (reply) {
          if (reply == "ok") {
            resolve();
          } else {
            reject(reply.error);
          }
        }).fail(function () {
          reject("");
        });
      });
    }
  };
  return file;
};

module.exports = File;

},{"./eol":13,"./observable":25,"jquery":"jquery"}],17:[function(require,module,exports){
"use strict";

var React = require("react");

var name_rx = new RegExp("/([^/]*/?)$");

var FinderSuggestItem = function FinderSuggestItem(props) {
  var name = name_rx.exec(props.path)[1];
  var onClick = function onClick(e) {
    e.preventDefault();
    props.onSelect(props.path);
  };
  var onMouseDown = function onMouseDown(e) {
    // prevent from getting focused
    e.preventDefault();
  };
  return React.createElement(
    "a",
    {
      className: props.active ? "selected" : "",
      onClick: onClick,
      onMouseDown: onMouseDown },
    name
  );
};

module.exports = FinderSuggestItem;

},{"react":"react"}],18:[function(require,module,exports){
"use strict";

var _ = require("underscore");
var $ = require("jquery");
var Signal = require("signals").Signal;

var FinderSuggest = function FinderSuggest(finder) {
  var model = {
    items: [],
    cursor: null, // highlighted item

    items_changed: new Signal(),
    cursor_moved: new Signal(),
    selected: new Signal(),

    update: function update(path) {
      $.ajax({
        method: "post",
        url: "/finder.php",
        timeout: 3000,
        data: {
          path: path
        },
        dataType: "json"
      }).fail(function () {
        console.log("failed to fetch suggest for the path: " + path);
      }).done(function (reply) {
        model.setItems(reply.items.map(function (i) {
          return reply.base + i;
        }));
      });
    },

    setItems: function setItems(items) {
      model.setCursor(null);
      model.items = items;
      model.items_changed.dispatch(model.items);
    },

    getItems: function getItems() {
      return model.items;
    },

    getCursor: function getCursor() {
      return model.cursor;
    },

    setCursor: function setCursor(path) {
      if (path === model.cursor) {
        return;
      }
      model.cursor = path;
      model.cursor_moved.dispatch(model.cursor);
    },

    moveCursor: function moveCursor(next) {
      if (model.cursor === null) {
        if (model.items.length != 0) {
          model.setCursor(model.items[0]);
        }
        return;
      }
      var idx = model.items.indexOf(model.cursor);
      idx += next ? +1 : -1;
      idx = Math.max(0, Math.min(model.items.length - 1, idx));
      model.setCursor(model.items[idx]);
    },

    select: function select(path) {
      model.setCursor(path);
      model.selected.dispatch(path);
    }
  };

  finder.visibility_changed.add(function (visible) {
    if (visible) {
      model.update(finder.getPath());
    }
  });

  finder.path_changed.add(_.debounce(model.update, 250));

  return model;
};

module.exports = FinderSuggest;

},{"jquery":"jquery","signals":"signals","underscore":"underscore"}],19:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");
var $ = require("jquery");
var FinderSuggestItem = require("./finder-suggest-item.jsx");

var FinderSuggest = function (_React$Component) {
  _inherits(FinderSuggest, _React$Component);

  function FinderSuggest(props) {
    _classCallCheck(this, FinderSuggest);

    var _this = _possibleConstructorReturn(this, (FinderSuggest.__proto__ || Object.getPrototypeOf(FinderSuggest)).call(this, props));

    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(FinderSuggest, [{
    key: "handleChange",
    value: function handleChange() {
      this.forceUpdate();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.suggest.items_changed.add(this.handleChange);
      this.props.suggest.cursor_moved.add(this.handleChange);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.suggest.items_changed.remove(this.handleChange);
      this.props.suggest.cursor_moved.remove(this.handleChange);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.props.suggest.cursor) {
        this.scrollIntoView(this.$list, this.$list.find(".selected"));
      }
    }
  }, {
    key: "scrollIntoView",
    value: function scrollIntoView($parent, $target) {
      var height = $target.height();
      var top = $target.prevAll().length * height;
      var bottom = top + height;
      var view_height = $parent.innerHeight();
      if (top - $parent.scrollTop() < 0) {
        $parent.scrollTop(top);
      }
      if (bottom - $parent.scrollTop() > view_height) {
        $parent.scrollTop(bottom - view_height);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var suggest = this.props.suggest;
      var self = this;
      return React.createElement(
        "div",
        {
          id: "finder-items",
          ref: function ref(list) {
            return self.$list = $(list);
          },
          className: suggest.items.length ? "active" : "" },
        suggest.items.map(function (path) {
          return React.createElement(FinderSuggestItem, {
            key: path,
            path: path,
            active: suggest.cursor === path,
            onSelect: suggest.select });
        })
      );
    }
  }]);

  return FinderSuggest;
}(React.Component);

module.exports = FinderSuggest;

},{"./finder-suggest-item.jsx":17,"jquery":"jquery","react":"react"}],20:[function(require,module,exports){
"use strict";

var React = require("react");
var ReactDOM = require("react-dom");
var Finder = require("./finder.jsx");

var FinderView = function FinderView($root, finder) {
  var render = function render() {
    ReactDOM.render(React.createElement(Finder, { finder: finder }), $root[0]);
  };
  render();
};

module.exports = FinderView;

},{"./finder.jsx":22,"react":"react","react-dom":"react-dom"}],21:[function(require,module,exports){
"use strict";

var Signal = require("signals").Signal;
var FinderSuggest = require("./finder-suggest");

var Finder = function Finder() {
  var model = {
    selected: new Signal(),
    path_changed: new Signal(),
    visibility_changed: new Signal(),

    path: "/",
    visible: false,

    select: function select(path) {
      model.setPath(path);
      if (path.substr(-1) == "/") {
        return;
      }
      model.hide();
      model.selected.dispatch(path);
    },

    show: function show() {
      model.visible = true;
      model.visibility_changed.dispatch(model.visible);
    },

    hide: function hide() {
      model.visible = false;
      model.visibility_changed.dispatch(model.visible);
      //       editor_manager.activate(editor_manager.getActive())
    },

    getPath: function getPath() {
      return model.path;
    },

    setPath: function setPath(path) {
      model.path = path;
      model.path_changed.dispatch(path);
    },

    goToParentDirectory: function goToParentDirectory() {
      model.setPath(model.path.replace(new RegExp("[^/]*/?$"), ""));
    },

    enter: function enter() {
      var path = suggest.getCursor();
      model.select(path ? path : model.path);
    },

    tab: function tab() {
      var cursor = suggest.getCursor();
      if (cursor) {
        model.setPath(cursor);
        return;
      }
      var items = suggest.getItems();
      if (items.length == 1) {
        model.setPath(items[0]);
        return;
      }
      suggest.update(model.path);
    }
  };

  var suggest = model.suggest = FinderSuggest(model);
  suggest.selected.add(function (path) {
    model.select(path);
  });

  return model;
};

module.exports = Finder;

},{"./finder-suggest":18,"signals":"signals"}],22:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");
var Mousetrap = require("mousetrap");
var False = require("./return-false");
var FinderSuggest = require("./finder-suggest.jsx");

var Finder = function (_React$Component) {
  _inherits(Finder, _React$Component);

  function Finder(props) {
    _classCallCheck(this, Finder);

    var _this = _possibleConstructorReturn(this, (Finder.__proto__ || Object.getPrototypeOf(Finder)).call(this, props));

    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(Finder, [{
    key: "handleChange",
    value: function handleChange() {
      this.forceUpdate();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var finder = this.props.finder;
      var input = this.input;
      finder.visibility_changed.add(this.handleChange);
      finder.path_changed.add(this.handleChange);
      finder.visibility_changed.add(function (visibility) {
        if (input) {
          input.focus();
        }
      });

      Mousetrap(input).bind("enter", False(finder.enter));
      Mousetrap(input).bind("tab", False(finder.tab));
      Mousetrap(input).bind("esc", False(finder.hide));
      Mousetrap(input).bind("down", False(function () {
        finder.suggest.moveCursor(true);
      }));
      Mousetrap(input).bind("up", False(function () {
        finder.suggest.moveCursor(false);
      }));
      Mousetrap(input).bind("mod+u", False(finder.goToParentDirectory));
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.finder.visibility_changed.remove(this.handleChange);
      this.props.finder.path_changed.remove(this.handleChange);
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      var finder = this.props.finder;

      var onChange = function onChange(e) {
        finder.setPath(e.target.value);
      };

      return React.createElement(
        "form",
        { id: "finder", className: finder.visible ? "active" : "" },
        React.createElement("input", {
          ref: function ref(input) {
            return self.input = input;
          },
          type: "text",
          id: "finder-path",
          className: "mousetrap",
          autoComplete: "off",
          value: finder.path,
          onChange: onChange,
          onBlur: finder.hide }),
        React.createElement(FinderSuggest, {
          suggest: finder.suggest })
      );
    }
  }]);

  return Finder;
}(React.Component);

module.exports = Finder;

},{"./finder-suggest.jsx":19,"./return-false":26,"mousetrap":"mousetrap","react":"react"}],23:[function(require,module,exports){
"use strict";

var Rotate = require("./rotate");

var Indent = function Indent(type) {
  return Rotate(["4SP", "2SP", "TAB"], type);
};

Indent.detectIndentType = function (content) {
  if (content.match(/[\r\n]+\t/)) {
    return "TAB";
  }
  var lines = content.split(/[\r\n]+/);
  for (var i = 0; i < lines.length; ++i) {
    var indent = lines[i].replace(/^( *).*/, "$1");
    if (indent.length == 2) {
      return "2SP";
    }
  }
  return "4SP";
};

module.exports = Indent;

},{"./rotate":27}],24:[function(require,module,exports){
"use strict";

var $ = require("jquery");
var EditorManagerView = require("./editor-manager-view");
var FinderView = require("./finder-view");

var MainView = function MainView(editor_mgr, finder) {
  var $main = $("main");
  EditorManagerView($('<div id="editor_manager">').appendTo($main), editor_mgr);
  FinderView($('<div>').appendTo($main), finder);

  // shortcut keys
  Mousetrap.bind(["mod+;", "mod+="], function () {
    editor_mgr.nextFile();
    return false;
  }, "keydown");
  Mousetrap.bind(["mod+shift+;", "mod+shift+="], function () {
    editor_mgr.prevFile();
    return false;
  }, "keydown");
  Mousetrap.bind(["mod+w", "mod+k"], function () {
    editor_mgr.close(editor_mgr.getActive());
    return false;
  }, "keydown");
  Mousetrap.bind(["mod+r"], function () {
    editor_mgr.reload(editor_mgr.getActive());
    return false;
  }, "keydown");
};

module.exports = MainView;

},{"./editor-manager-view":9,"./finder-view":20,"jquery":"jquery"}],25:[function(require,module,exports){
"use strict";

var Signal = require("signals").Signal;

var Observable = function Observable(value) {
  var observable = new Signal();
  Object.assign(observable, {
    get: function get() {
      return value;
    },
    set: function set(new_value) {
      if (value === new_value) {
        return;
      }
      var old_value = value;
      value = new_value;
      observable.dispatch(value, old_value, observable);
    },
    observe: observable.add // alias
  });
  return observable;
};

module.exports = Observable;

},{"signals":"signals"}],26:[function(require,module,exports){
"use strict";

var returnFalse = function returnFalse(func) {
  return function () {
    func.apply(this, arguments);
    return false;
  };
};

module.exports = returnFalse;

},{}],27:[function(require,module,exports){
"use strict";

var Observable = require("./observable");

var Rotate = function Rotate(values, value) {
  var isValidValue = function isValidValue(v) {
    return v === null || v === undefined || values.indexOf(v) != -1;
  };

  var checkValue = function checkValue(v) {
    if (!isValidValue(v)) {
      throw "invalid value: " + v;
    }
  };
  checkValue(value);

  var rotate = Observable(value);

  rotate.getValues = function () {
    return values;
  };

  var _set = rotate.set;
  rotate.set = function (new_value) {
    checkValue(new_value);
    _set(new_value);
  };

  rotate.rotate = function () {
    var idx = values.indexOf(rotate.get());
    idx = (idx + 1) % values.length;
    rotate.set(values[idx]);
  };

  return rotate;
};

module.exports = Rotate;

},{"./observable":25}],28:[function(require,module,exports){
"use strict";

var React = require("react");
var ReactDOM = require("react-dom");
var Portal = require("react-portal-minimal");
var SelectEncodingDialog = require("./select-encoding-dialog.jsx");

var SelectEncodingDialogView = function SelectEncodingDialogView($root, model) {
  var isOpen = false;
  var render = function render() {
    ReactDOM.render(React.createElement(
      Portal,
      null,
      React.createElement(SelectEncodingDialog, {
        model: model,
        isOpen: isOpen })
    ), $root[0]);
  };
  model.visible.observe(function (visible) {
    isOpen = visible;
    render();
  });
  model.encoding.observe(render);
};

module.exports = SelectEncodingDialogView;

},{"./select-encoding-dialog.jsx":30,"react":"react","react-dom":"react-dom","react-portal-minimal":"react-portal-minimal"}],29:[function(require,module,exports){
"use strict";

var $ = require("jquery");
var Signal = require("signals").Signal;
var Observable = require("./observable");

var SelectEncodingDialog = function SelectEncodingDialog() {

  var dialog = {
    visible: Observable(false),
    encoding: Observable(),
    options: ["UTF-8", "EUC-JP", "SJIS-WIN"],
    confirmed: new Signal(),

    confirm: function confirm() {
      dialog.visible.set(false);
      dialog.confirmed.dispatch(dialog.encoding.get());
    },

    show: function show(encoding) {
      dialog.encoding.set(encoding);
      dialog.visible.set(true);
    },

    hide: function hide() {
      dialog.visible.set(false);
    }
  };
  return dialog;
};

module.exports = SelectEncodingDialog;

},{"./observable":25,"jquery":"jquery","signals":"signals"}],30:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");
var createDialog = require("./dialog.jsx");

var SelectEncodingDialog = function (_React$Component) {
  _inherits(SelectEncodingDialog, _React$Component);

  function SelectEncodingDialog(props) {
    _classCallCheck(this, SelectEncodingDialog);

    var _this = _possibleConstructorReturn(this, (SelectEncodingDialog.__proto__ || Object.getPrototypeOf(SelectEncodingDialog)).call(this, props));

    _this.handleEncodingChange = _this.handleEncodingChange.bind(_this);
    return _this;
  }

  _createClass(SelectEncodingDialog, [{
    key: "handleEncodingChange",
    value: function handleEncodingChange(e) {
      this.props.model.encoding.set(e.target.value);
    }
  }, {
    key: "render",
    value: function render() {
      var model = this.props.model;
      return React.createElement(
        "div",
        null,
        React.createElement(
          "select",
          {
            size: "4",
            autoFocus: true,
            value: model.encoding.get(),
            onChange: this.handleEncodingChange },
          model.options.map(function (encoding) {
            return React.createElement(
              "option",
              null,
              encoding
            );
          })
        ),
        React.createElement(
          "button",
          { "class": "ok", onClick: model.confirm },
          "OK"
        ),
        React.createElement(
          "button",
          { "class": "cancel", onClick: model.hide },
          "Cancel"
        )
      );
    }
  }]);

  return SelectEncodingDialog;
}(React.Component);

module.exports = createDialog(SelectEncodingDialog, "select-encoding-dialog");

},{"./dialog.jsx":8,"react":"react"}],"app":[function(require,module,exports){
"use strict";

var Mousetrap = require("mousetrap");
var EditorManager = require("./editor-manager");
var Finder = require("./finder");
var MainView = require("./main-view");

module.exports.run = function () {
  var finder = Finder();
  var editor_mgr = EditorManager(finder);
  var view = MainView(editor_mgr, finder);

  var saveFileList = function saveFileList() {
    var files = editor_mgr.getFiles();
    localStorage.setItem("open-files", JSON.stringify(files));
  };
  var loadFileList = function loadFileList() {
    return JSON.parse(localStorage.getItem("open-files") || "[]");
  };
  loadFileList().forEach(function (path) {
    editor_mgr.open(path);
  });

  editor_mgr.opened.add(saveFileList);
  editor_mgr.closed.add(saveFileList);

  // show finder
<<<<<<< HEAD
  Mousetrap.bind(["mod+o", "mod+p"], function() {
    finder.show()
    return false
  }, "keydown")
}

},{"./editor-manager":10,"./finder":18,"./main-view":21,"mousetrap":"mousetrap"}]},{},[])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
  Mousetrap.bind(["mod+o", "mod+p"], function () {
    finder.show();
    return false;
  }, "keydown");
};

<<<<<<< HEAD
},{"./editor-manager":10,"./finder":20,"./main-view":23,"mousetrap":"mousetrap"}]},{},[])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> Use React for file tabs
=======
},{"./editor-manager":10,"./finder":21,"./main-view":24,"mousetrap":"mousetrap"}]},{},[])
<<<<<<< HEAD
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> Use React for Finder
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> Use React for dialog
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> Use React for footer of Editor
